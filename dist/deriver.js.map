{"version":3,"sources":["../src/_intro.js","../src/deriver.js","../src/parser.js","../src/simplifier.js","../src/strings.js","../src/tree.js","../src/treepattern.js","../src/unparser.js","../src/_outro.js"],"names":[],"mappings":"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","file":"deriver.js","sourcesContent":["// Source: src/_intro.js\nvar Deriver = (function() {\r\n","// Source: src/deriver.js\nfunction derive(t) {\r\n    if(!(t instanceof Tree)) t = parseInput(t);\r\n\r\n    if(t.val === 'x') return new Tree(1);\r\n\r\n    if(!t.left && !t.right || TreePattern.eq(t.val, TreePattern.NUM)) return new Tree(0);\r\n\r\n    // Sum and Difference Rule\r\n    if(t.val === '+' || t.val === '-') {\r\n        var res = new Tree(t.val);\r\n        res.l(derive(t.left));\r\n        res.r(derive(t.right));\r\n        if(res.right.val === 0) return res.left;\r\n        if(res.left.val === 0) return res.right;\r\n        return res;\r\n    }\r\n\r\n    // Product Rule and Constant Rule\r\n    if(t.val === '*') {\r\n        if(TreePattern.eq(t.left.val, TreePattern.NUM) ||\r\n           TreePattern.eq(t.right.val, TreePattern.NUM)) {\r\n            return constantRule(t);\r\n       } else {\r\n           return productRule(t);\r\n       }\r\n    }\r\n\r\n    // Power Rule and Exponential Rule\r\n    if(t.val === '^' || t.val === 'sqrt') {\r\n        if(t.val === 'sqrt') {\r\n            t.left = t.right.clone();\r\n            var half = new Tree('/');\r\n            half.l(1); half.r(2);\r\n            t.right = half;\r\n            t.val = \"^\";\r\n        }\r\n        if(TreePattern.eq(t.right, TreePattern.NUM)) {\r\n            if(!TreePattern.eq(t.left, TreePattern.NUM)) {\r\n                return powerRule(t);\r\n            }\r\n        } else {\r\n            return exponentialRule(t);\r\n        }\r\n    }\r\n\r\n    // Quotient Rule\r\n    if(t.val === '/') {\r\n        return quotientRule(t);\r\n        //TODO make this check better and deal with fractions\r\n    }\r\n\r\n    // Log Rules\r\n    if(TreePattern.eq(t.val, TreePattern.LOG)) {\r\n        return logRule(t);\r\n    }\r\n\r\n    // Trig Rules\r\n    if(TreePattern.eq(t.val, TreePattern.TRIG)) {\r\n        return trigRules(t);\r\n    }\r\n\r\n}\r\n\r\nfunction constantRule(t) {\r\n    var res = new Tree('*'), d, c;\r\n\r\n    if(TreePattern.eq(t.right.val, TreePattern.NUM)) {\r\n        c = t.right.val;\r\n        d = derive(t.left);\r\n    } else if(TreePattern.eq(t.left.val, TreePattern.NUM)) {\r\n        c = t.left.val;\r\n        d = derive(t.right);\r\n    }\r\n\r\n    if(d.val === 1) return new Tree(c);\r\n    if(TreePattern.eq(d.val, TreePattern.NUM)) return new Tree(c * d.val);\r\n\r\n    if(d.left && TreePattern.eq(d.left.val, TreePattern.NUM)) {\r\n        d.left.val *= c;\r\n        return d;\r\n    }\r\n\r\n    res.l(c);\r\n    res.r(d);\r\n\r\n    return res;\r\n}\r\n\r\nfunction powerRule(t) {\r\n    var tree = t.clone(),\r\n        res = new Tree(\"*\"),\r\n        innerFx = t.left.clone();\r\n\r\n    if(TreePattern.eq(tree.right.val, TreePattern.NUM)) {\r\n        var c = tree.right.val--;\r\n        res.l(c);\r\n        if(tree.right.val === 1) {\r\n            tree = tree.left;\r\n        }\r\n        res.r(tree);\r\n    } else {\r\n        res.l(tree.right.clone());\r\n        tree.right.left.val -= tree.right.right.val;\r\n        res.r(tree);\r\n    }\r\n\r\n    return chainRule(res, innerFx);\r\n}\r\n\r\nfunction productRule(t) {\r\n    var res = new Tree(\"+\"),\r\n        left = new Tree(\"*\"),\r\n        right = new Tree(\"*\");\r\n\r\n    left.l(t.left);\r\n    left.r(derive(t.right));\r\n\r\n    right.l(t.right);\r\n    right.r(derive(t.left));\r\n\r\n    res.l(left);\r\n    res.r(right);\r\n\r\n    return res;\r\n}\r\n\r\nfunction quotientRule(t) {\r\n    var res = new Tree('/'),\r\n        num = new Tree('-'),\r\n        denom = new Tree('^'),\r\n        hi = t.left,\r\n        lo = t.right,\r\n        dHi = derive(hi),\r\n        dLo = derive(lo),\r\n        loDHi = new Tree(\"*\"),\r\n        hiDLo = new Tree(\"*\");\r\n\r\n    if(dHi.val !== 1) {\r\n        loDHi.l(lo);\r\n        loDHi.r(dHi);\r\n    } else {\r\n        loDHi = lo;\r\n    }\r\n\r\n    if(dLo.val !== 1) {\r\n        hiDLo.l(hi);\r\n        hiDLo.r(dLo);\r\n    } else {\r\n        hiDLo = hi;\r\n    }\r\n\r\n    num.l(loDHi);\r\n    num.r(hiDLo);\r\n\r\n    if(TreePattern.eq(loDHi, TreePattern.NUM) && TreePattern.eq(hiDLo, TreePattern.NUM)) {\r\n        num = loDHi.val - hiDLo.val;\r\n    }\r\n\r\n    var zeroPattern = new Tree('*');\r\n    zeroPattern.l(TreePattern.ANY);\r\n    zeroPattern.r(0);\r\n\r\n    if(num.left.equals(zeroPattern) || num.left.equals(zeroPattern.switch())) {\r\n        var r = new Tree(\"*\");\r\n        r.l(-1);\r\n        r.r(num.right);\r\n        if(num.right.val === 1) {\r\n            num = new Tree(-1);\r\n        } else {\r\n            num = r;\r\n        }\r\n    }\r\n    if(num.right && (num.right.equals(zeroPattern) || num.right.equals(zeroPattern.switch()))) {\r\n        num = num.left;\r\n    }\r\n\r\n    denom.l(lo);\r\n    denom.r(2);\r\n\r\n    res.l(num);\r\n    res.r(denom);\r\n\r\n    return res;\r\n}\r\n\r\nfunction chainRule(org, innerFx) {\r\n    if(innerFx.right) {\r\n        var res = new Tree(\"*\");\r\n        var d = derive(innerFx);\r\n        if(d.val != '1') {\r\n            res.l(org);\r\n            res.r(d);\r\n\r\n            return res;\r\n        }\r\n    }\r\n\r\n    return org;\r\n}\r\n\r\nfunction trigRules(t) {\r\n    var tree = t.clone(),\r\n        tRules = {\r\n            'sin': parseInput('cos@@@'),\r\n            'cos': parseInput('-1*sin@@@'),\r\n            'tan': parseInput('(sec@@@)^2'),\r\n            'csc': parseInput('-1*csc@@@*cot@@@'),\r\n            'sec': parseInput('sec@@@*tan@@@'),\r\n            'cot': parseInput('-1*(csc@@@)^2'),\r\n            'arcsin': parseInput('1/(sqrt(1-@@@^2))'),\r\n            'arccos': parseInput('-1/(sqrt(1-@@@^2))'),\r\n            'arctan': parseInput('1/(1+(@@@^2))'),\r\n            'arccsc': parseInput('-1/(abs(@@@)*sqrt(@@@^2-1))'),\r\n            'arcsec': parseInput('1/(abs(@@@)*sqrt(@@@^2-1))'),\r\n            'arccot': parseInput('-1/(1+@@@^2)')\r\n        };\r\n\r\n    if(tRules[t.val]) {\r\n        var res = tRules[t.val].clone();\r\n\r\n        res.replace(TreePattern.MARKER, t.right);\r\n\r\n        return chainRule(res, t.right);\r\n    }\r\n}\r\n\r\n\r\nfunction logRule(t) {\r\n    var res = new Tree('/');\r\n\r\n    if(TreePattern.eq(t.right, TreePattern.NUM)) return new Tree(0);\r\n\r\n    res.l(derive(t.right));\r\n    res.r(t.right);\r\n    return res;\r\n}\r\n\r\nfunction exponentialRule(t) {\r\n    var res = new Tree(\"*\"),\r\n        ln = new Tree(\"ln\");\r\n\r\n    res.l(t.clone());\r\n    ln.r(t.left);\r\n    res.r(ln);\r\n\r\n    if(t.left.val === 'e') {\r\n        res = t.clone();\r\n    }\r\n\r\n    return chainRule(res, t.right);\r\n}\r\n","// Source: src/parser.js\nfunction replaceNegatives(val){\r\n    for(var i=0; i<val.length; i++){\r\n        if(val.charAt(i)==='-' && (i===0 || \"+*^/-(\".indexOf(val.charAt(i-1))>-1)){\r\n            val = __strings.replaceAt.call(val, i,'~');\r\n        }\r\n    }\r\n    return val;\r\n}\r\n\r\nfunction parseParens(val) {\r\n    var lefts = __strings.findChar.call(val,'('),\r\n        rights = __strings.findChar.call(val,')'),\r\n        list = [];\r\n    if(lefts.length !== rights.length) throw \"Mismatched Parentheses!\";\r\n\r\n    // Dope algorithm\r\n    for(var i=lefts.length-1; i>=0; i--) {\r\n        var k = i;\r\n        while(k>=0 && lefts[i] < rights[k]) {\r\n            k--;\r\n        }\r\n        list.push([lefts.pop(), rights.splice(k+1,1)[0]]);\r\n    }\r\n\r\n    return list.reverse();\r\n}\r\n\r\nfunction cleanInput(val) {\r\n    val = replaceNegatives(__strings.removeSpaces.call(val)).toLowerCase();\r\n    function sorter(a, b) {return a - b;}\r\n\r\n    var missingMultiply = [],\r\n        missingParens = [];\r\n\r\n    Object.keys(TreePattern.__FUNCTIONS).map(function(fx) {\r\n        missingParens = missingParens.concat(__strings.findChar.call(val,fx).map(function(pos) {\r\n            return pos + fx.length;\r\n        }));\r\n    });\r\n\r\n    missingParens.sort(sorter);\r\n\r\n    function findOp(pos, str) {\r\n        return Math.min.apply(Math, TreePattern.checkParens.map(function(op) {\r\n            return pos + __strings.findChar.call(str, op)[0] || str.length + pos;\r\n        }));\r\n    }\r\n\r\n    for(var f=missingParens.length-1; f>=0; f--) {\r\n        var pos = missingParens[f],\r\n            end = findOp(pos, val.substring(missingParens[f]));\r\n\r\n        if(val[pos] !== '(') {\r\n            val = __strings.splice.call(val,pos, '(');\r\n            val = __strings.splice.call(val,end+1, ')');\r\n        }\r\n    }\r\n\r\n    TreePattern.checkMultiply.map(function(n) {\r\n        missingMultiply = missingMultiply.concat(__strings.findChar.call(val,n));\r\n    });\r\n\r\n    missingMultiply.sort(sorter);\r\n\r\n    for(var p=missingMultiply.length-1; p>=0; p--) {\r\n        var position = missingMultiply[p],\r\n            token = val[position-1];\r\n        if(!isNaN(token) || ')x'.indexOf(token) > -1) {\r\n            val = __strings.splice.call(val,position, '*');\r\n        }\r\n    }\r\n\r\n    var logs = __strings.findChar.call(val,'log');\r\n    for(var l=logs.length-1; l>=0; l--) {\r\n        var logPos = logs[l],\r\n            parens = parseParens(val),\r\n            comma = val.indexOf(',', logPos),\r\n            base = val.substring(logPos+4, comma),\r\n            arg = val.substring(comma+1, val.indexOf(')', comma)),\r\n            endParen;\r\n\r\n        for(var arr in parens) {\r\n            if(parens[arr][0] === logPos+3) {\r\n                endParen = parens[arr][1];\r\n                break;\r\n            }\r\n        }\r\n\r\n        arg = val.substring(comma+1, endParen);\r\n        var replace = \"ln(\" + arg + \")/ln(\" + base + \")\";\r\n        val = __strings.splice.call(__strings.cut.call(val, logPos, endParen), logPos, replace);\r\n    }\r\n\r\n    return val;\r\n}\r\n\r\nfunction parseInput(val) {\r\n    if(val === \"\") return false;\r\n    val = cleanInput(val);\r\n\r\n    var parens = parseParens(val),\r\n        org = val;\r\n\r\n    while(parens[0] && parens[0][0]===0 && parens[0][1]===val.length-1) {\r\n        org = val = val.substring(1, val.length-1);\r\n        parens = parseParens(val);\r\n    }\r\n\r\n    for(var j in parens) {\r\n        var l = parens[j][0],\r\n            r = parens[j][1];\r\n\r\n        val = val.substring(0, l) + Array(r-l+2).join('_') + val.substring(r+1);\r\n    }\r\n\r\n    var foundOps = {};\r\n    for(var c=val.length-1; c>=0; c--) {\r\n        for(var op in TreePattern.OPS) {\r\n            if(val.substring(c, c+op.length) === op) {\r\n                foundOps[op] = c;\r\n            }\r\n        }\r\n    }\r\n\r\n    var pos, token;\r\n    for(var o in TreePattern.OPS) {\r\n        if(foundOps[o]>=0) {\r\n            pos = foundOps[o];\r\n            token = val.substring(pos, pos+o.length);\r\n            break;\r\n        }\r\n    }\r\n    if(pos === undefined) {\r\n        if(val.length === 3 && rules[val]) return new Tree(TreePattern[rules[val]]);\r\n        return new Tree(val.replace(/~/, '-'));\r\n    }\r\n    var tree = new Tree(token);\r\n    tree.left = parseInput(org.substring(0, pos));\r\n    tree.right = parseInput(org.substring(pos+token.length));\r\n    return tree;\r\n}\r\n","// Source: src/simplifier.js\nfunction simplifyHelper(t) {\r\n    var tree = t.clone();\r\n    var res = tree;\r\n\r\n    if (t.left && t.left.equals(t.right)) {\r\n        res = simplifyEquivalent(t);\r\n    }\r\n\r\n    if (res.equals(parseInput(\"$$$+###\")) || res.equals(parseInput(\"$$$*###\"))) {\r\n        //TODO perhaps factor this out into own simplifer function\r\n        res.switch();\r\n    }\r\n\r\n    for (var f in schemaFns[res.val]) {\r\n        var parsed = parseInput(f);\r\n        if (res.val === parsed.val) {\r\n            if (res.equals(parsed)) {\r\n                res = schemaFns[res.val][f](res);\r\n            }\r\n            //TODO maybe make schemaFns ggroup by right value as well\r\n            //TODO above todo prolly wont work .. .try figuring out how to make an actual converter between regular tree and a pattern tree\r\n\r\n\r\n            // else if (res.val === '+' || res.val === '*') {\r\n            //     //TODO instead of switching make eerything conform to certain rule with formalizer function or something\r\n            //     if (res.equals(parsed.switch())) {\r\n            //         res.switch();\r\n            //         res = schemaFns[f](res);\r\n            //         break;\r\n            //     } else if (res.equals(parseInput(\"$$$*###\") || res.equals(parseInput(\"$$$*###\")))) {\r\n            //         //TODO perhaps factor this out into own simplifer function\r\n            //         res.switch();\r\n            //         break;\r\n            //     }\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction simplify(t) {\r\n    if(!(t instanceof Tree)) t = parseInput(t);\r\n    if (!t.left && !t.right) return t;\r\n    var s = simplifyHelper(t);\r\n    if (s.equals(t)) {\r\n        if (t.left) {\r\n            t.left = simplify(t.left);\r\n        }\r\n        if (t.right) {\r\n            t.right = simplify(t.right);\r\n        }\r\n\r\n        return simplifyHelper(t);\r\n    } else {\r\n        if (simplify(s.clone()).equals(s)) return s;\r\n        else return simplify(simplify(s));\r\n    }\r\n}\r\n\r\nvar schemaFns = {\r\n    \"*\": {\r\n        \"###*(###/$$$)\": function(tree) {\r\n            var res = new Tree('/');\r\n            res.l(tree.left.val * tree.right.left.val);\r\n            res.r(simplifyHelper(tree.right.right));\r\n            return res;\r\n        },\r\n        \"(1/$$$)*($$$)\": function(tree) {\r\n            tree.left.left = tree.right;\r\n            return tree.left;\r\n        },\r\n        \"###*(###*$$$)\": function(tree) {\r\n            var res = new Tree('*');\r\n            res.l(tree.left.val * tree.right.left.val);\r\n            res.r(simplifyHelper(tree.right.right));\r\n            return res;\r\n        },\r\n        \"###*($$$*###)\": function(tree) {\r\n            var res = new Tree('*');\r\n            res.l(tree.left.val * tree.right.right.val);\r\n            res.r(simplifyHelper(tree.right.left));\r\n            return res;\r\n        },\r\n        \"$$$*(-1*$$$)\": function(tree) {\r\n            tree.right.left = tree.left.clone();\r\n            tree.left = new Tree(-1);\r\n            return tree;\r\n        },\r\n        \"###*###\": function(tree) {\r\n            return new Tree(tree.left.val * tree.right.val);\r\n        },\r\n        \"0*$$$\": function(tree) {\r\n            return new Tree(0);\r\n        },\r\n        \"1*$$$\": function(tree) {\r\n            return tree.right;\r\n        }\r\n    },\r\n    \"+\": {\r\n        \"###+###\": function(tree) {\r\n            return new Tree(tree.left.val + tree.right.val);\r\n        },\r\n        \"(###*$$$)+(###*$$$)\": function(tree) {\r\n            if (tree.left.right.equals(tree.right.right)) {\r\n                var res = new Tree('*');\r\n                res.l(tree.left.left.val + tree.right.left.val);\r\n                res.r(tree.left.right);\r\n                return res;\r\n            } else {\r\n                return tree;\r\n            }\r\n        },\r\n        \"(cosx)^2+(sinx)^2\": function(tree) {\r\n            return new Tree(1);\r\n        },\r\n        \"(sinx)^2+(cosx)^2\": function(tree) {\r\n            return new Tree(1);\r\n        }\r\n    },\r\n    \"-\": {\r\n        \"###-###\": function(tree) {\r\n            return new Tree(tree.left.val - tree.right.val);\r\n        },\r\n        \"$$$-(-1*$$$)\": function(tree) {\r\n            tree.val = '+';\r\n            tree.right = tree.right.right;\r\n            return tree;\r\n        }\r\n    },\r\n    \"/\": {\r\n        \"$$$/1\": function(tree) {\r\n            return tree.left;\r\n        },\r\n        \"($$$*(x^###))/(x^###)\": function(tree) {\r\n            //TODO try moving this to the below function ... and then\r\n            var numDegree = tree.left.right.right.val,\r\n                denomDegree = tree.right.right.val;\r\n\r\n            if (numDegree > denomDegree) {\r\n                tree.left.right.right.val -= denomDegree;\r\n                return tree.left;\r\n            } else {\r\n                tree.right.right.val -= numDegree;\r\n                var res = new Tree('/');\r\n                res.r(tree.right);\r\n                res.l(tree.left.left);\r\n                return res;\r\n            }\r\n        },\r\n        \"(x^###)/(x^###)\": function(tree) {\r\n            var res = new Tree('/'),\r\n                st = new Tree('*');\r\n\r\n            st.l(1);\r\n            st.r(tree.left);\r\n            res.l(st);\r\n            res.r(tree.right);\r\n            return this['($$$*(x^###))/(x^###)'](res);\r\n        },\r\n        \"###/>>>\": function(tree) {\r\n            var r = trigIdentities.reciprocals[tree.right.val];\r\n            var res = new Tree('*');\r\n            res.l(tree.left);\r\n            res.r(r);\r\n            res.right.right = tree.right.right;\r\n            return res;\r\n        },\r\n        \"###/(>>>^###)\": function(tree) {\r\n            var degree = tree.right.right;\r\n            var res = new Tree('*');\r\n            res.l(tree.left);\r\n            res.r('^');\r\n            res.right.left = tree.right.left;\r\n            res.right.left.val = trigIdentities.reciprocals[tree.right.left.val];\r\n            res.right.right = degree;\r\n            return res;\r\n        }\r\n    },\r\n    \"^\": {\r\n        \"x^1\": function(tree) {\r\n            return new Tree('x');\r\n        },\r\n        \"x^0\": function(tree) {\r\n            return new Tree('1');\r\n        },\r\n        \"($$$)^(1/2)\": function(tree) {\r\n            var res = new Tree('sqrt');\r\n            res.right = tree.left;\r\n            return res;\r\n        },\r\n        \"(sqrt($$$))^2\": function(tree) {\r\n            return tree.left.right;\r\n        },\r\n        \"(###*x)^(###)\": function(tree) {\r\n            tree.left.left.val = Math.pow(tree.left.left.val, tree.right.val);\r\n            return tree.left;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nvar trigIdentities = {\r\n    reciprocals: {\r\n        'sin': 'csc',\r\n        'cos': 'sec',\r\n        'tan': 'cot',\r\n        'csc': 'sin',\r\n        'sec': 'cos',\r\n        'cot': 'tan'\r\n    }\r\n};\r\n\r\nfunction simplifyEquivalent(tree) {\r\n    for (var f in equivalenceFns) {\r\n        if (parseInput(f).equals(tree)) {\r\n            return equivalenceFns[f](tree);\r\n        }\r\n    }\r\n    return tree;\r\n}\r\n\r\nvar equivalenceFns = {\r\n    \"$$$+$$$\": function(tree) {\r\n        var res = new Tree(\"*\");\r\n        res.l(2);\r\n        res.r(tree.right);\r\n        return res;\r\n    },\r\n    \"$$$*$$$\": function(tree) {\r\n        var res = new Tree(\"^\");\r\n        res.l(tree.left);\r\n        res.r(2);\r\n        return res;\r\n    }\r\n};\r\n","// Source: src/strings.js\n__strings = {\r\n    splice: function(start, newSubStr) {\r\n        return this.slice(0, start) + newSubStr + this.slice(start);\r\n    },\r\n\r\n    cut: function (start, end) {\r\n        return this.substring(0, start) + this.substring(end+1);\r\n    },\r\n\r\n    replaceAt: function(index, char){\r\n        return this.substring(0,index) + char + this.substring(index+char.length);\r\n    },\r\n\r\n    findChar: function(token) {\r\n        var indices = [];\r\n        for(var i=0; i<this.length; i++)\r\n         if(this.substring(i, i+token.length) === token) indices.push(i);\r\n\r\n        return indices;\r\n    },\r\n\r\n    removeSpaces: function() {\r\n        return this.trim().replace(/\\s+/g, '');\r\n    }\r\n};\r\n\r\n// String.prototype.splice = function(start, newSubStr) {\r\n//     return this.slice(0, start) + newSubStr + this.slice(start);\r\n// };\r\n//\r\n// String.prototype.cut = function (start, end) {\r\n//     return this.substring(0, start) + this.substring(end+1);\r\n// };\r\n//\r\n// String.prototype.replaceAt=function(index, char){\r\n//     return this.substring(0,index) + char + this.substring(index+char.length);\r\n// };\r\n//\r\n// String.prototype.findChar = function(token) {\r\n//     var indices = [];\r\n//     for(var i=0; i<this.length; i++)\r\n//      if(this.substring(i, i+token.length) === token) indices.push(i);\r\n//\r\n//     return indices;\r\n// };\r\n//\r\n// String.prototype.removeSpaces = function() {\r\n//     return this.trim().replace(/\\s+/g, '');\r\n// };\r\n//TODO: dont change the string prototype\r\n","// Source: src/tree.js\nfunction Tree(val) {\r\n    this.val = !isNaN(val) ? Number(val) : val;\r\n    this.left = false;\r\n    this.right = false;\r\n}\r\n\r\nTree.prototype.getDir = function(dir) {\r\n    dir = \"\" + dir;\r\n    if (parseInt(dir) >= 1 || dir.toLowerCase() === 'r' || dir.toLowerCase() === 'right') dir = 'right';\r\n    else dir = 'left';\r\n\r\n    return dir;\r\n};\r\n\r\nTree.prototype.add = function(dir, val) {\r\n    if(val !== 0 && !val) return;\r\n\r\n    dir = this.getDir(dir);\r\n\r\n    var current = this;\r\n\r\n    while(current[dir]) {\r\n        current = current[dir];\r\n    }\r\n\r\n    if(val instanceof Tree) {\r\n        current[dir] = val;\r\n    } else {\r\n        current[dir] = new Tree(val);\r\n    }\r\n};\r\n\r\nTree.prototype.r = function (v) {\r\n    this.add(1, v);\r\n};\r\n\r\nTree.prototype.l = function(v) {\r\n    this.add(-1, v);\r\n};\r\n\r\nTree.prototype.equals = function(tree) {\r\n    if(!tree || !TreePattern.eq(this.val, tree.val)) return false;\r\n    var left, right; left = right = true;\r\n    if(this.left && tree.left) {\r\n        left = tree.left.equals(this.left);\r\n    }\r\n    if(this.right && tree.right) {\r\n        right = tree.right.equals(this.right);\r\n    }\r\n    return left && right;\r\n};\r\n\r\nTree.prototype.clone = function() {\r\n    var clone = new Tree(this.val),\r\n        left = this.left,\r\n        right = this.right;\r\n\r\n    if(left) {\r\n        clone.left = left.clone();\r\n    }\r\n    if(right) {\r\n        clone.right = right.clone();\r\n    }\r\n\r\n    return clone;\r\n};\r\n\r\nTree.prototype.switch = function() {\r\n    var temp = this.right;\r\n    this.right = this.left;\r\n    this.left = temp;\r\n    return this;\r\n};\r\n\r\nTree.prototype.contains = function(target) {\r\n\r\n    var left, right; left = right = false;\r\n    if(target instanceof Tree && this.equals(target) ||\r\n       TreePattern.eq(this.val, target)) return true;\r\n    if(this.left) left = this.left.contains(target);\r\n    if(this.right) right = this.right.contains(target);\r\n\r\n    return left || right;\r\n};\r\n\r\nTree.prototype.replace = function(target, replace) {\r\n    if(TreePattern.eq(this.val, target)) {\r\n        if(replace instanceof Tree) {\r\n            this.val = replace.val;\r\n            this.l(replace.left);\r\n            this.r(replace.right);\r\n            return;\r\n        } else {\r\n            this.val = replace;\r\n        }\r\n    }\r\n    if(this.left) this.left.replace(target, replace);\r\n    if(this.right) this.right.replace(target, replace);\r\n    return this;\r\n};\r\n\r\nTree.prototype.toString = function(num) {\r\n    if(!num) num = 2;\r\n    var left = Array(num+1).join(\".\") + this.left.toString(num+2),\r\n        right = Array(num+1).join(\".\") + this.right.toString(num+2);\r\n    if(!this.left) left = '';\r\n    if(!this.right) right = '';\r\n    return  '[' + this.val  + ']' + '\\n' + left + right;\r\n};\r\n\r\nTree.prototype.toFlatString = function() {\r\n    var left = this.left ? this.left.toFlatString() : '';\r\n    var right = this.right ? this.right.toFlatString() : '';\r\n    return  left + \"\" + this.val + \"\" + right;\r\n};\r\n","// Source: src/treepattern.js\nvar TreePattern = {};\r\n\r\n\r\nfunction treePatternRule(rule) {\r\n    this.rule = rule;\r\n}\r\n\r\ntreePatternRule.prototype.toString = function() {\r\n    // for compatability when Tree is stringified\r\n    return this.rule;\r\n};\r\n\r\nvar rules = {\r\n    \"$$$\": \"ANY\",\r\n    \"###\": \"NUM\",\r\n    \"&&&\": \"OP\",\r\n    \">>>\": \"TRIG\",\r\n    '@@@': \"MARKER\",\r\n    ',,,': \"LOG\",\r\n    \"|||\": \"FRAC\"\r\n};\r\nfor(var p in rules) {\r\n    TreePattern[rules[p]] = new treePatternRule(p);\r\n}\r\n\r\nvar _defaults = {\r\n    \"###\": 1,\r\n    \"&&&\": '+',\r\n    \">>>\": 'sin',\r\n    \"@@@\": '@@@',\r\n    \",,,\": 'ln'\r\n};\r\n\r\nTreePattern.__OPS = {\r\n    '+': 1,\r\n    '-': 1,\r\n    '*': 2,\r\n    '/': 2,\r\n    '^': 3\r\n};\r\n\r\nTreePattern.__FUNCTIONS = {\r\n    'arcsin': 4,\r\n    'arccos': 4,\r\n    'arctan': 4,\r\n    'arccsc': 4,\r\n    'arcsec': 4,\r\n    'arccot': 4,\r\n    'sin': 5,\r\n    'cos': 5,\r\n    'tan': 5,\r\n    'csc': 5,\r\n    'sec': 5,\r\n    'cot': 5,\r\n    'ln': 6,\r\n    'log': 6,\r\n    'abs': 7,\r\n    'sqrt': 7\r\n};\r\n\r\nTreePattern.OPS = {};\r\n\r\nfor(var o in TreePattern.__OPS)\r\n    TreePattern.OPS[o] = TreePattern.__OPS[o];\r\n\r\nfor(var o in TreePattern.__FUNCTIONS)\r\n    TreePattern.OPS[o] = TreePattern.__FUNCTIONS[o];\r\n\r\nTreePattern.checkMultiply = ['(', 'x'].concat(Object.keys(TreePattern.__FUNCTIONS));\r\nTreePattern.checkParens = [')'].concat(Object.keys(TreePattern.__FUNCTIONS)).concat(Object.keys(TreePattern.__OPS));\r\n\r\n\r\nTreePattern.fns = {\r\n    \"###\": function(val) { return (val instanceof Tree) ? !isNaN(val.val) || !isNaN(val.left.val) && !isNaN(val.right.val) : !isNaN(val); },\r\n    \"&&&\": function(val) { return val && \"+-/*^\".indexOf(val) > -1; },\r\n    \">>>\": function(val) { return val && \"sin|cos|tan|csc|sec|cot|arcsin|arccos|arctan|arccsc|arcsec|arccot\".indexOf(val) > -1 ; },\r\n    \"@@@\": function(val) { return val === '@@@'; },\r\n    \",,,\": function(val) { return val && \"ln|log\".indexOf(val) > -1; },\r\n    \"|||\": function(val) { return val instanceof Tree && val.val === '/' && isNaN(val.left) && isNaN(val.right); }\r\n};\r\n\r\n\r\nTreePattern.eq = function(val, pattern) {\r\n    if(pattern == TreePattern.ANY || val == TreePattern.ANY) return true;\r\n\r\n    if(val instanceof treePatternRule) {\r\n        // ensure pattern has the treePatternRule and val is a simple value\r\n        var temp = pattern;\r\n        pattern = val;\r\n        val = temp;\r\n    }\r\n\r\n\r\n    if(val instanceof treePatternRule) {\r\n        // if they are both treePatternRule, then convert val to simple value\r\n        if(_defaults[val])\r\n            val = _defaults[val];\r\n        else\r\n            console.log(\"No \" + val);\r\n    }\r\n\r\n\r\n    if(this.fns[pattern.rule]) {\r\n        return this.fns[pattern.rule](val);\r\n    }\r\n\r\n    if(val instanceof Tree) val = val.val;\r\n\r\n    return val == pattern;\r\n};\r\n","// Source: src/unparser.js\nfunction unparse(tree) {\r\n    if(!tree.left && !tree.right) return tree.val;\r\n\r\n    var right = unparse(tree.right),\r\n        left = unparse(tree.left),\r\n        middle = tree.val;\r\n\r\n    if(TreePattern.OPS[tree.val] > TreePattern.OPS[tree.right.val]) {\r\n        right = '(' + unparse(tree.right) + ')';\r\n    }\r\n\r\n    if(TreePattern.OPS[tree.val] > TreePattern.OPS[tree.left.val]) {\r\n        left = '(' + unparse(tree.left) + ')';\r\n    }\r\n\r\n    if(\r\n        tree.val === '*' &&\r\n        typeof right === 'string' &&\r\n        TreePattern.checkMultiply.join('|').indexOf(right[0]) > -1 //&&\r\n        // ((left+\"\").split(\"\").reverse()[0] !== 'x' || (right+\"\")[0] === '(')\r\n    ) middle = '';\r\n\r\n    if(tree.val === 'abs') {\r\n        middle = '|';\r\n        right = right + '|';\r\n    }\r\n\r\n    return (left || '') + middle + right;\r\n}\r\n","// Source: src/_outro.js\n\r\n    return {\r\n        derive: function(val) {\r\n            return this.simplify(derive(val));\r\n        },\r\n        parse: parseInput,\r\n        simplify: function(val) {\r\n            return unparse(simplify(val));\r\n        },\r\n        _derive: derive,\r\n        _equals: TreePattern.eq\r\n    };\r\n\r\n})();\r\n"]}